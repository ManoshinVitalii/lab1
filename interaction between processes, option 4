#include <iostream>
#include <fstream>
#include "sys/wait.h"
#include <vector>
#include <string>
using namespace std;

bool TransformToFloat(char* data, int& i, float& ans) {
    float pow = 1;
    bool flag = 0;
    ans = 0;
    for (; data[i] != ' '; ++i) {
        if (data[i] == '\n')
            return 0;
        if (data[i] == '.') {
            flag = 1;
            continue;
        }
        if (flag)
            pow /= 10;
        else
            ans *= 10;
        ans += (data[i] - '0') * pow;
    }
    ++i;
    return 1;
}

void Read(vector<float>& data, ifstream& in) {
    const int N = 100;
    char mass[N];

    in.read((char*)&mass, sizeof(mass));

    int poz = 0;
    float ans;
    while (TransformToFloat(mass, poz, ans))
        data.push_back(ans);
    data.push_back(ans);
}

void Write(float c, ofstream& out) {
    string s = to_string(c);
    int n = s.size();
    const int N = 1000;
    char mass[N];
    for (int i = 0; i < n; ++i)
        mass[i] = s[i];
        
    out.write((char*)&mass, n);
}

int main() {
    ifstream in("input");
    ofstream out("output");
    if (!in) cout << "in error" << endl;
    if (!out) cout << "out error" << endl;

    int pipe_dt[2];
    int err = pipe(pipe_dt);
    if (err == -1) { cout << "pipe error" << endl; return -1; }

    pid_t pid = fork();
    if (pid == -1) { cout << "fork error" << endl; return -1; }

    if (pid == 0) {
        cout << "I am child process" << endl;
        close(pipe_dt[1]); // закрыть запись

        int sz;
        float wal, a;
        read(pipe_dt[0], &sz, sizeof(sz)); // принять размер
        read(pipe_dt[0], &wal, sizeof(wal)); // принять первое значение
        for (int i = 1; i < sz; ++i) {
            read(pipe_dt[0], &a, sizeof(a)); // принять остальные значения
            if (a == 0) {
                close(pipe_dt[0]);
                cout << "zero error" << endl;
                return -1;
            }
            wal /= a;
        }
        Write(wal, out);
        close(pipe_dt[0]); // закрыть чтение
        cout << "child finish" << endl;
    }
    else {
        cout << "I am parent process" << endl;
        close(pipe_dt[0]); // закрыть чтение

        vector<float>data;
        Read(data, in);
        int sz = data.size();
        write(pipe_dt[1], &sz, sizeof(sz)); // послать в поток размер
        
        for (float a : data) {
            write(pipe_dt[1], &a, sizeof(a)); // послать в поток значения
        }

        close(pipe_dt[1]); // закрыть запись
        cout << "parent wait" << endl;
        wait(NULL);
        cout << "parent finished" << endl;
    }
    in.close();
    out.close();
    return 0;
}
